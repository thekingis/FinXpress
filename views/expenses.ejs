<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FinXpress - Expense Tracker</title>
    <link rel="stylesheet" href="/bootstrap/icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">
    <script src="/jquery/jquery.js"></script>
    <script src="/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="shortcut icon" href="/images/icon.png" type="image/x-icon">
    </head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light header-bg position-fixed top-0 start-0 end-0 z-index-x shadow">
        <div class="container-fluid">
          <a class="navbar-brand" href="/dashboard">
            <img src="/images/icon.png" width="30" height="24" class="d-inline-block align-text-top">
            FinXpress
          </a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
              <li class="nav-item">
                <a class="nav-link" aria-current="page" href="/dashboard">Dashboard</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/budgets">Budget Manager</a>
              </li>
              <li class="nav-item">
                <a class="nav-link active" href="/expenses">Expense Tracker</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/reports-analytics">Reports & Analytics</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/finance-goal">Financial Goal</a>
              </li>
              <li class="nav-item d-lg-none">
                <a class="nav-link" href="/settings">Settings</a>
              </li>
              <li class="nav-item d-lg-none">
                <a class="nav-link text-danger" href="/logout"><i class="bi bi-power me-2"></i>Logout</a>
              </li>
            </ul>
            <div class="ms-lg-auto d-sm-none d-lg-inline-block dropdown">
              <a class="nav-link dropdown-toggle" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="/images/userlogo.png" width="25" class="me-2">
                <span>Hi <%= userData.name.split(' ')[0] %></span>
              </a>
              <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDarkDropdownMenuLink">
                <li><a class="dropdown-item" href="/settings"><i class="bi bi-sliders me-2"></i>Settings</a></li>
                <li><a class="dropdown-item" href="/settings/manage-categories"><i class="bi bi-database-gear me-2"></i>Manage Categories</a></li>
                <li><a class="dropdown-item" href="/settings/security"><i class="bi bi-key-fill me-2"></i>Change Password</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-danger" href="/logout"><i class="bi bi-power me-2"></i>Logout</a></li>
              </ul>
            </div>
          </div>
        </div>
      </nav>
      <div class="position-relative mt-100 mb-5 mx-2 mb-4 border border-2 border-light p-5 rounded-2 shadow bg-white">
        <div class="mb-4 position-relative d-flex">
          <a class="btn btn-danger shadow rounded-1 mx-sm-auto ms-md-auto me-md-0" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
            <i class="bi bi-pencil-square me-3"></i>
            <span>Record Expense</span>
          </a>
        </div>
        <div id="container">
          <% if(Object.keys(expenseData).length == 0){ %>
            <div class="text-center mt-5" id="no-data">
              <img src="/images/no-data.png" width="300">
              <h3>No Data Available</h3>
            </div>
          <% } else {
            %>
            <h2 class="text-center">Expenses</h2>
            <div class="accordion" id="accordionExample">
              <%
                let counter = 0;
                let currentMonth = null;
                const formatOptions = {
                  weekday: 'long',
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                };
                const formatter = new Intl.DateTimeFormat('en-US', formatOptions);
                const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                for (var monthKey in expenseData) {
                  const [year, mon] = monthKey.split('-');
                  monIndex = parseInt(mon) - 1;
                  const month = months[monIndex];
                  const arcState = counter == 0 ? 'show' : '';
                  const btnState = counter == 0 ? '' : 'collapsed';
                  const budgetId = budgetObject[monthKey]._id;
                  %>
                    <div class="accordion-item" id="<%= monthKey %>">
                      <h2 class="accordion-header" id="heading-<%= monthKey %>">
                        <button class="accordion-button <%= btnState %>" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-<%= monthKey %>" aria-expanded="true" aria-controls="collapse-<%= monthKey %>">
                          <%= month %> <%= year %> Expenses
                        </button>
                      </h2>
                      <div id="collapse-<%= monthKey %>" class="accordion-collapse collapse <%= arcState %>" aria-labelledby="heading-<%= monthKey %>" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                          <div id="chartView-<%= budgetId %>" class="text-nowrap overflow-x-auto text-center">
                            <%
                            const categories = budgetObject[monthKey].categories;
                            for (const key in categories) {
                              const spent = categories[key].spent;
                              const budget = categories[key].budget;
                              %>
                              <div class="d-inline-block m-2 rounded-2 bg-light p-2" style="width: 250px;">
                                <h6><%= key %></h6>
                                <canvas data-for-pie="<%= key %>" data-for-budget-id="<%= budgetId %>" data-for-spent="<%= spent %>" data-for-budget="<%= budget %>"></canvas>
                              </div>
                              <%
                            }
                            %>
                          </div>
                          <table id="<%= budgetId %>" class="table table-danger table-striped table-hover">
                            <thead>
                              <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Category</th>
                                <th scope="col">Amount Spent</th>
                                <th scope="col"></th>
                              </tr>
                            </thead>
                            <tbody>
                              <%
                                expenseData[monthKey].forEach(object => {
                                  const expenseId = object._id.toString();
                                  const date = new Date(object.date);
                                  const dateStr = formatter.format(date);
                                  const amount = new Intl.NumberFormat('en-US').format(object.amount);
                                  const expData = {
                                    budgetId: budgetId,
                                    expenseId: expenseId,
                                    category: object.category,
                                    amount: object.amount,
                                    monthKey: monthKey
                                  };
                                  const dataExp = JSON.stringify(expData);
                                  %>
                                    <tr id="<%= expenseId %>">
                                      <td><%= dateStr %></td>
                                      <td><%= object.category %></td>
                                      <td>â‚¦<%= amount %></td>
                                      <td>
                                          <button
                                          class="btn btn-sm btn-danger" data-for-object="<%= dataExp %>" onclick="deleteExpense($(this))" title="Delete Expense">
                                            <i class="bi bi-trash3"></i>
                                          </button>
                                      </td>
                                    </tr>
                                  <%
                                });
                              %>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  <%
                  counter++;
                }
              %>
            </div>
          <% } %>
        </div>
      </div>
      <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="staticBackdropLabel">Record Expense</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">Select Budget</label>
                <select class="form-select" id="selectBudget">
                  <option value="" data-select>--Select Budget--</option>
                  <% if(budgetData.length > 0){
                    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                    budgetData.forEach(object => {
                      const budgetId = object._id.toString();
                      var [year, mon] = object.month.split('-');
                      monIndex = parseInt(mon) - 1;
                      const month = months[monIndex];%>
                      <option value="<%= budgetId %>"><%= month %> <%= year %></option>
                    <% })
                  } %>
                </select>
              </div>
              <div class="mb-3">
                <label class="form-label">Select Category</label>
                <select class="form-select" id="selectCategory" disabled>
                  <option value="" data-select>--Select Category--</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="amount" class="form-label">Amount Spent</label>
                <div class="input-group">
                  <span class="input-group-text">â‚¦</span>
                  <input type="number" class="form-control" id="amount" />
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <div class="rounded-2 bg-danger text-white py-1 px-2 my-3 me-auto" id="errorLog"></div>
              <button type="button" class="btn btn-secondary btn-sm rounded-1" data-bs-dismiss="modal">Cancel</button>
              <button id="recordBtn" type="button" class="btn btn-primary btn-sm rounded-1 position-relative" onclick="recordExpense($(this))">
                <span>Record</span>
                <img src="/images/loader.gif" width="20" class="position-absolute top-50 start-50 translate-middle invisible">
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="modal fade" id="exampleModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Delete Expense</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              Deleting this Expense is irreversible. Do you want to delete it?
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-sm btn-danger" onclick="emitDelete()">Delete</button>
            </div>
          </div>
        </div>
      </div>
      <script src="http://localhost:8000/socket.io/socket.io.js"></script>
      <script src="/jquery/toast.js"></script>
      <script src="/chart/chart.umd.min.js"></script>
      <script>

        let deleteObj = null;
        const socket = io();
        const budgetObject = new Object();
        const canvasObject = new Object();
        const budgetData = <%- JSON.stringify(budgetData) %>;
        const myModalEl = document.getElementById('staticBackdrop');
        const myModal = new bootstrap.Modal(myModalEl, {});
        var exampleModal = new bootstrap.Modal(document.getElementById('exampleModal'), {});
        const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        const formatOptions = {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        };
        const formatter = new Intl.DateTimeFormat('en-US', formatOptions);
        
        $('div#errorLog').html('').hide();

        myModalEl.addEventListener('hidden.bs.modal', function (event) {
          $('input#amount, select#selectBudget, select#selectCategory').val('');
          $('div#errorLog').html('').hide();
          $('select#selectCategory option[value!=""]').remove();
          $('select#selectCategory').prop('disabled', true);
        });

        budgetData.forEach(object => {
          const budgetId = object._id.toString();
          budgetObject[budgetId] = object;
        });

        $('canvas[data-for-pie]').each(function(){
          const spent = parseInt($(this).attr('data-for-spent'));
          const budget = parseInt($(this).attr('data-for-budget'));
          const budgetId = $(this).attr('data-for-budget-id');
          const category = $(this).attr('data-for-pie');
          const balance = budget - spent;
          const pieObject = canvasObject[budgetId] || new Object();

          const chart = new Chart(this, {
            type: 'pie',
            data: {
              labels: ['Balance', 'Spent'],
              datasets: [{
                label: '',
                data: [balance, spent],
                borderWidth: 0
              }]
            },
            options: {}
          });
          pieObject[category] = chart;
          canvasObject[budgetId] = pieObject;
        });

        socket.on('delete-expense', (emitData) => {
          onExpenseDelete(emitData);
        });

        socket.on('edit-budget', (emitData) => {
          for (const key in canvasObject[emitData.budgetId]) {
              const chart = canvasObject[emitData.budgetId][key];
              chart.destroy();
            if(!(key in emitData.categories)){
              delete canvasObject[emitData.budgetId][key];
              $(`canvas[data-for-budget-id="${emitData.budgetId}"][data-for-pie="${key}"]`).parent().remove();
            }
          }
          for (const key in emitData.categories) {
            const spent = emitData.categories[key].spent;
            const budget = emitData.categories[key].budget;
            if(!(key in canvasObject[emitData.budgetId])){
              const canvasHtml = `
                              <div class="d-inline-block m-2 rounded-2 bg-light p-2" style="width: 250px;">
                                <h6>${key}</h6>
                                <canvas data-for-pie="${key}" data-for-budget-id="${emitData.budgetId}" data-for-spent="${spent}" data-for-budget="${budget}"></canvas>
                              </div>
              `;
              $(`div#chartView-${emitData.budgetId}`).append($(canvasHtml));
            } else {
              $(`canvas[data-for-pie="${key}"][data-for-budget-id="${emitData.budgetId}"]`).attr({
                'data-for-spent': spent,
                'data-for-budget': budget
              });
            }
          }
          initChart($(`div#chartView-${emitData.budgetId} canvas[data-for-pie]`));
        })

        function initChart($canvas){
          $canvas.each(function(){
            const spent = parseInt($(this).attr('data-for-spent'));
            const budget = parseInt($(this).attr('data-for-budget'));
            const budgetId = $(this).attr('data-for-budget-id');
            const category = $(this).attr('data-for-pie');
            const balance = budget - spent;
            const pieObject = canvasObject[budgetId] || new Object();

            const chart = new Chart(this, {
              type: 'pie',
              data: {
                datasets: [{
                  data: [balance, spent],
                  borderWidth: 0
                }]
              },
              options: {}
            });
            pieObject[category] = chart;
            canvasObject[budgetId] = pieObject;
          });
        }

        $('select#selectBudget').change(function(){
          const budgetId = $(this).val();
          $('select#selectCategory option[value!=""]').remove();
          if(budgetId == ''){
            $('select#selectCategory option[value!=""]').remove();
            $('select#selectCategory').prop('disabled', true);
            return;
          }
          $('select#selectCategory').prop('disabled', false);
          const object = budgetObject[budgetId];
          Object.keys(object.categories).forEach(key => {
            $option = $('<option>');
            $option.val(key);
            $option.html(key);
            $('select#selectCategory').append($option);
          });
        });

        function recordExpense($this){
          $('div#errorLog').html('').hide();
          const budgetId = $('select#selectBudget').val();
          const selectedCategory = $('select#selectCategory').val();
          const amount = $('input#amount').val();
          const budgetAmount = amount == '' ? 0 : parseInt(amount);
          if(budgetId == ''){
            $('div#errorLog').html('Please select a budget').show();
            return;
          }
          if(selectedCategory == ''){
            $('div#errorLog').html('Please select a category').show();
            return;
          }
          if(budgetAmount < 1){
            $('div#errorLog').html('Please specify the amount spent').show();
            return;
          }
          $this.prop('disabled', true);
          $this.find('span').addClass('invisible');
          $this.find('img').removeClass('invisible');
          const data = {
            budgetId: budgetId,
            category: selectedCategory,
            amount: budgetAmount
          };
          socket.emit('record-expense', data);
        }

        socket.on('record-expense', emitData => {
          $('button#recordBtn').prop('disabled', false);
          $('button#recordBtn > span').removeClass('invisible');
          $('button#recordBtn > img').addClass('invisible');
          if(!emitData.success){
            const toast = new Toast(`<span class="text-danger"><i class="bi bi-trash3-fill me-2"></i>${emitData.message}</span>`);
            toast.show();
            return;
          }
          myModal.hide();
          const containsData = $('div#accordionExample').length > 0;
          if(!containsData){
            const xData = `
              <h2 class="text-center">Expenses</h2>
              <div class="accordion" id="accordionExample"></div>
            `;
            $('div#container').html(xData);
          }
          const length = $(`div.accordion-item#${emitData.month}`).length;
          const [year, mon] = emitData.month.split('-');
          if(length == 0) {
            const monthArray = [emitData.month];
            $('div.accordion-item').each(function(){
              const id = this.id;
              monthArray.push(id);
            });
            const monIndex = parseInt(mon) - 1;
            const month = months[monIndex];
            let accordion = `
                    <div class="accordion-item" id="${emitData.month}">
                      <h2 class="accordion-header" id="heading-${emitData.month}">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${emitData.month}" aria-expanded="true" aria-controls="collapse-${emitData.month}">
                          ${month} ${year} Expenses
                        </button>
                      </h2>
                      <div id="collapse-${emitData.month}" class="accordion-collapse collapse show" aria-labelledby="heading-${emitData.month}" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                          <div class="text-nowrap overflow-x-auto text-center">`;
                          for (const key in emitData.categories) {
                            const spent = emitData.categories[key].spent;
                            const budget = emitData.categories[key].budget;
                            accordion += `
                              <div class="d-inline-block m-2 rounded-2 bg-light p-2" style="width: 250px;">
                                <h6>${key}</h6>
                                <canvas data-for-pie="${key}" data-for-budget-id="${emitData.budgetId}" data-for-spent="${spent}" data-for-budget="${budget}"></canvas>
                              </div>`;
                          }
                          accordion += `</div>
                          <table id="${emitData.budgetId}" class="table table-danger table-striped table-hover">
                            <thead>
                              <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Category</th>
                                <th scope="col">Amount Spent</th>
                                <th scope="col"></th>
                              </tr>
                            </thead>
                            <tbody>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
            `;
            monthArray.sort();
            monthArray.reverse();
            const index = monthArray.indexOf(emitData.month);
            if(index == 0){
              $('div#accordionExample').prepend($(accordion));
            } else {
              const i = index - 1;
              const pm = monthArray[i];
              $(`div.accordion-item#${pm}`).after($(accordion));
            }
            $(`div.accordion-item#${emitData.month} canvas[data-for-pie]`).each(function(){
              const spent = parseInt($(this).attr('data-for-spent'));
              const budget = parseInt($(this).attr('data-for-budget'));
              const budgetId = $(this).attr('data-for-budget-id');
              const category = $(this).attr('data-for-pie');
              const balance = budget - spent;
              const pieObject = canvasObject[budgetId] || new Object();

              const chart = new Chart(this, {
                type: 'pie',
                data: {
                  labels: ['Balance', 'Spent'],
                  datasets: [{
                    label: '',
                    data: [balance, spent],
                    borderWidth: 0
                  }]
                },
                options: {}
              });
              pieObject[category] = chart;
              canvasObject[budgetId] = pieObject;
            });

          } else {
            const $canvas = $(`canvas[data-for-budget-id="${emitData.budgetId}"][data-for-pie="${emitData.category}"]`);
            const spent = emitData.categories[emitData.category].spent;
            const budget = parseInt($canvas.attr('data-for-budget'));
            const balance = budget - spent;
            $canvas.attr('data-for-spent', spent);
            let chart = canvasObject[emitData.budgetId][emitData.category];
            chart.destroy();
            chart = new Chart($canvas[0], {
              type: 'pie',
              data: {
                labels: ['Balance', 'Spent'],
                datasets: [{
                  label: '',
                  data: [balance, spent],
                  borderWidth: 0
                }]
              },
              options: {}
            });
            canvasObject[emitData.budgetId][emitData.category] = chart;
          }
          const date = new Date(emitData.date);
          const dateStr = formatter.format(date);
          const amount = new Intl.NumberFormat('en-US').format(emitData.amount);
          const expData = {
            budgetId: emitData.budgetId,
            expenseId: emitData.expenseId,
            category: emitData.category,
            amount: emitData.amount,
            monthKey: emitData.month
          };
          const dataExp = JSON.stringify(expData);
          const tr = `
              <tr id="${emitData.expenseId}">
                <td>${dateStr}</td>
                <td>${emitData.category}</td>
                <td>â‚¦${amount}</td>
                <td>
                  <button
                  class="btn btn-sm btn-danger" onclick="deleteExpense($(this))" title="Delete Expense">
                    <i class="bi bi-trash3"></i>
                  </button>
                </td>
              </tr>
          `;
          $tr = $(tr);
          $tr.find('button').attr('data-for-object', dataExp);
          $(`table#${emitData.budgetId} tbody`).prepend($tr);
          $('div.accordion-item h2.accordion-header button.accordion-button').not('.collapsed').addClass('collapsed');
          $('div.accordion-item div.accordion-collapse').removeClass('show');
          $(`div.accordion-item#${emitData.month} h2.accordion-header button.accordion-button`).removeClass('collapsed');
          $(`div.accordion-item#${emitData.month} div.accordion-collapse`).addClass('show');
          $(`table#${emitData.budgetId}`).get(0).scrollIntoView({behavior:"smooth"});
        });

        function deleteExpense($this){
          deleteObj = JSON.parse($this.attr('data-for-object'));
          exampleModal.show();
        }

        function emitDelete(){     
          socket.emit('delete-expense', deleteObj);     
          exampleModal.hide();
          onExpenseDelete(deleteObj);
        }
        
        function onExpenseDelete(object){
          $('tr#'+object.expenseId).remove();
          const expenseCount = $(`table#${object.budgetId} > tbody > tr`).length;
          if(expenseCount == 0){
            $(`table#${object.budgetId}`).remove();
            $(`div.accordion-item#${object.monthKey}`).remove();
            const length = $('div.accordion-item').length;
            if(length == 0){
              const xData = `
                <div class="text-center mt-5" id="no-data">
                  <img src="/images/no-data.png" width="300">
                  <h3>No Data Available</h3>
                </div>
              `;
              $('div#container').html(xData);
            }
            return;
          }
          const amount = object.amount;
          const $canvas = $(`canvas[data-for-budget-id="${object.budgetId}"][data-for-pie="${object.category}"]`);
          const spent = parseInt($canvas.attr('data-for-spent')) - amount;
          const budget = parseInt($canvas.attr('data-for-budget'));
          const balance = budget - spent;
          $canvas.attr('data-for-spent', spent);
          let chart = canvasObject[object.budgetId][object.category];
          chart.destroy();
          chart = new Chart($canvas[0], {
            type: 'pie',
            data: {
              labels: ['Balance', 'Spent'],
              datasets: [{
                label: '',
                data: [balance, spent],
                borderWidth: 0
              }]
            },
            options: {}
          });
          canvasObject[object.budgetId][object.category] = chart;
          const toast = new Toast('<span class="text-danger"><i class="bi bi-trash3-fill me-2"></i>Expense Deleted</span>');
          toast.show();
        }

      </script>
</body>
</html>